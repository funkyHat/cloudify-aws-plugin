tosca_definitions_version: cloudify_dsl_1_3

description: >
  Do things with S3, cause happiness.

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - plugin.yaml

inputs:
  docker_image_name:
    description: >
      Name of image which will be retrieved from docker hub.
    default: training/webapp:latest

  aws_access_key_id:
    description: >
      The access key ID used to access the AWS API
  aws_secret_access_key:
    description: >
      The secret key used to access the AWS API

  image:
    description: >
      Image to be used when launching agent VM's.
      Recommended images for ECS: http://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_container_instance.html
    default: ami-a88a46c5

  size:
    description: >
      Flavor of the agent VM's
    default: m3.medium

node_templates:

  elb:
    type: cloudify.aws.nodes.ElasticLoadBalancer
    properties:
      elb_name: sw-test
      zones: ['us-east-1a']
      listeners:
          - [80, 5000, 'http']
      aws_config:
        aws_access_key_id: { get_input: aws_access_key_id }
        aws_secret_access_key: { get_input: aws_secret_access_key }
        region: us-east-1

  cluster1:
    type: cloudify.aws.nodes.ECSCluster
    properties:
      name: sw-test
      aws_config:
        aws_access_key_id: { get_input: aws_access_key_id }
        aws_secret_access_key: { get_input: aws_secret_access_key }

  clusterinstances:
    type: cloudify.aws.nodes.Instance
    instances:
      deploy: 2
    properties:
      image_id: { get_input: image }
      instance_type: { get_input: size }
      install_agent: false
      parameters:
        user_data: "#!/bin/bash \n echo ECS_CLUSTER=sw-test >> /etc/ecs/ecs.config"
        instance_profile_name: ecsInstanceRole
      aws_config:
        aws_access_key_id: { get_input: aws_access_key_id }
        aws_secret_access_key: { get_input: aws_secret_access_key }
    relationships:
      - type: cloudify.aws.relationships.ecs_instances_in_cluster
        target: cluster1

  service1:
    type: cloudify.aws.nodes.ECSService
    properties:
      name: sw-test
      desired_count: 1
      container_listening_port: 5000
      lb_management_role: ecsService
      aws_config:
        aws_access_key_id: { get_input: aws_access_key_id }
        aws_secret_access_key: { get_input: aws_secret_access_key }
    relationships:
      - type: cloudify.aws.relationships.ecs_service_running_on_cluster
        target: cluster1
      - type: cloudify.aws.relationships.ecs_service_runs_task
        target: task1
      # If this isn't there then a much longer retry period is needed because
      # the service gets created while the cluster instances are being created
      # and has to wait too long for them to be both deployed and registered
      # with the cluster.
      - type: cloudify.relationships.depends_on
        target: clusterinstances

  con1:
    type: cloudify.aws.nodes.ECSContainer
    properties:
      name: 'hello'
      memory: 4
      image: { get_input: docker_image_name }

  vol1:
    type: cloudify.aws.nodes.ECSVolume
    properties:
      name: 'vol1'

  task1:
    type: cloudify.aws.nodes.ECSTask
    properties:
      name: 'test'
      aws_config:
        aws_access_key_id: { get_input: aws_access_key_id }
        aws_secret_access_key: { get_input: aws_secret_access_key }
    relationships:
      - type: cloudify.aws.relationships.ecs_container_for_task
        target: con1
      - type: cloudify.aws.relationships.ecs_volume_for_task
        target: vol1
